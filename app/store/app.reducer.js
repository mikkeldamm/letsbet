"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bet_state_1 = require("./bet.state");
var app_actions_1 = require("./app.actions");
function appReducer(state, action) {
    if (state === void 0) { state = bet_state_1.initialBetState; }
    switch (action.type) {
        case app_actions_1.Actions.ADD_BET_WITH_DESCRIPTION: {
            return Object.assign({}, state, { bets: state.bets.concat([action.payload]) });
        }
        case app_actions_1.Actions.UPDATE_BET_WITH_BUYIN: {
            var betId_1 = action.payload.id;
            var betBuyin_1 = action.payload.buyin;
            var newBets = state.bets.map(function (b) {
                if (b.id === betId_1) {
                    return Object.assign({}, b, { buyin: betBuyin_1 });
                }
                return b;
            });
            return Object.assign({}, state, { bets: newBets });
        }
        case app_actions_1.Actions.UPDATE_BET_WITH_OPPONENT: {
            var betId_2 = action.payload.id;
            var opponentId_1 = action.payload.opponentId;
            var newBets = state.bets.map(function (b) {
                if (b.id === betId_2) {
                    return Object.assign({}, b, { opponentId: opponentId_1 });
                }
                return b;
            });
            return Object.assign({}, state, { bets: newBets });
        }
        default: {
            return state;
        }
    }
}
exports.appReducer = appReducer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLnJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHAucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHlDQUF3RDtBQUN4RCw2Q0FBd0M7QUFHeEMsb0JBQTJCLEtBQXVCLEVBQUUsTUFBYztJQUF2QyxzQkFBQSxFQUFBLG1DQUF1QjtJQUM5QyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVsQixLQUFLLHFCQUFPLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztZQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFNLEtBQUssQ0FBQyxJQUFJLFNBQUUsTUFBTSxDQUFDLE9BQU8sRUFBQyxFQUFFLENBQUMsQ0FBQztRQUMvRSxDQUFDO1FBRUQsS0FBSyxxQkFBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDakMsSUFBTSxPQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDaEMsSUFBTSxVQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFFdEMsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2dCQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQUssQ0FBQyxDQUFDLENBQUM7b0JBQ2pCLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDckQsQ0FBQztnQkFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVELEtBQUsscUJBQU8sQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBQ3BDLElBQU0sT0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2hDLElBQU0sWUFBVSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1lBRTdDLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQztnQkFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxPQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNqQixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxjQUFBLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRCxDQUFDO2dCQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBRUQsU0FBUyxDQUFDO1lBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUF2Q0QsZ0NBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuXG5pbXBvcnQgeyBCZXRTdGF0ZSwgaW5pdGlhbEJldFN0YXRlIH0gZnJvbSAnLi9iZXQuc3RhdGUnO1xuaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJy4vYXBwLmFjdGlvbnMnO1xuaW1wb3J0IHsgQmV0IH0gZnJvbSAnLi9iZXQubW9kZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwUmVkdWNlcihzdGF0ZSA9IGluaXRpYWxCZXRTdGF0ZSwgYWN0aW9uOiBBY3Rpb24pOiBCZXRTdGF0ZSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuXG4gICAgICAgIGNhc2UgQWN0aW9ucy5BRERfQkVUX1dJVEhfREVTQ1JJUFRJT046IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBiZXRzOiBbLi4uc3RhdGUuYmV0cywgYWN0aW9uLnBheWxvYWRdwqB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgQWN0aW9ucy5VUERBVEVfQkVUX1dJVEhfQlVZSU46IHtcbiAgICAgICAgICAgIGNvbnN0IGJldElkID0gYWN0aW9uLnBheWxvYWQuaWQ7XG4gICAgICAgICAgICBjb25zdCBiZXRCdXlpbiA9IGFjdGlvbi5wYXlsb2FkLmJ1eWluO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdCZXRzID0gc3RhdGUuYmV0cy5tYXAoYiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGIuaWQgPT09IGJldElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBiLCB7IGJ1eWluOiBiZXRCdXlpbiB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgYmV0czogbmV3QmV0c8KgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlIEFjdGlvbnMuVVBEQVRFX0JFVF9XSVRIX09QUE9ORU5UOiB7XG4gICAgICAgICAgICBjb25zdCBiZXRJZCA9IGFjdGlvbi5wYXlsb2FkLmlkO1xuICAgICAgICAgICAgY29uc3Qgb3Bwb25lbnRJZCA9IGFjdGlvbi5wYXlsb2FkLm9wcG9uZW50SWQ7XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0JldHMgPSBzdGF0ZS5iZXRzLm1hcChiID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYi5pZCA9PT0gYmV0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGIsIHsgb3Bwb25lbnRJZCB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgYmV0czogbmV3QmV0c8KgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=